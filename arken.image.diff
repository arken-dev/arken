diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3fe4ec8..bb39245 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,7 @@ include(arken-barcode)
 include(arken-base64)
 include(arken-concurrent-worker)
 include(arken-digest)
+include(arken-image)
 include(arken-mvm)
 include(arken-net-httpserver)
 include(arken-os)
diff --git a/cmake/arken-image.cmake b/cmake/arken-image.cmake
new file mode 100644
index 0000000..1fe7281
--- /dev/null
+++ b/cmake/arken-image.cmake
@@ -0,0 +1,21 @@
+option(ARKEN_IMAGE "enable arken.image" true)
+
+if(ARKEN_IMAGE)
+
+  file(GLOB files ${PROJECT_SOURCE_DIR}/src/arken/image/*.cpp)
+  set( arken-image ${files} )
+  message(${arken-image})
+
+  FIND_PACKAGE(ImageMagick
+    REQUIRED
+    COMPONENTS MagickWand
+  )
+
+  INCLUDE_DIRECTORIES(
+    ${ImageMagick_INCLUDE_DIRS}
+    ${ImageMagick_MagickWand_INCLUDE_DIRS}
+  )
+
+endif()
+
+message("ARKEN IMAGE.............: ${ARKEN_IMAGE}")
diff --git a/cmake/arken-notify.cmake b/cmake/arken-notify.cmake
index 659e6f7..60c3bbc 100644
--- a/cmake/arken-notify.cmake
+++ b/cmake/arken-notify.cmake
@@ -46,4 +46,8 @@ if(ARKEN_NOTIFY STREQUAL "glib")
   #include_directories(${GDK_PIXBUF_INCLUDE_DIRS})
 endif()
 
-message("ARKEN NOTIFY.............: ${ARKEN_NOTIFY}")
+if(ARKEN_NOTIFY STREQUAL "")
+  message("ARKEN NOTIFY............: OFF")
+else()
+  message("ARKEN NOTIFY............: ${ARKEN_NOTIFY}")
+endif()
diff --git a/src/arken/CMakeLists.txt b/src/arken/CMakeLists.txt
index 8972626..dbbc01f 100644
--- a/src/arken/CMakeLists.txt
+++ b/src/arken/CMakeLists.txt
@@ -8,16 +8,6 @@
 #
 # ------------------------------------------------------------------------------
 
-FIND_PACKAGE(ImageMagick
-  REQUIRED
-  COMPONENTS MagickWand
-)
-
-INCLUDE_DIRECTORIES(
-  ${ImageMagick_INCLUDE_DIRS}
-  ${ImageMagick_MagickWand_INCLUDE_DIRS}
-)
-
 
 include_directories(${PROJECT_SOURCE_DIR}/include)
 include_directories(${PROJECT_SOURCE_DIR}/deps/include)
@@ -41,6 +31,7 @@ set(mongrel2 ${PROJECT_SOURCE_DIR}/src/vendors/mongrel2/http11/http11_parser.c)
 add_library(
   arken SHARED
   ${src}
+  ${arken-image}
   ${base64}
   ${base64-embedded}
   ${compress}
@@ -66,7 +57,14 @@ target_link_libraries(arken curl)
 target_link_libraries(arken lua)
 target_link_libraries(arken json)
 target_link_libraries(arken ${ImageMagick_LIBRARIES})
-target_link_libraries(arken ${ImageMagick_MagickWand_LIBRARY})
+
+#------------------------------------------------------------------------------
+# ARKEN_IMAGE
+#------------------------------------------------------------------------------
+
+if(ARKEN_IMAGE)
+  target_link_libraries(arken ${ImageMagick_MagickWand_LIBRARY})
+endif()
 
 #------------------------------------------------------------------------------
 # ARKEN_NOTIFY
diff --git a/src/arken/image.cpp b/src/arken/image.cpp
deleted file mode 100644
index 5fdaa1a..0000000
--- a/src/arken/image.cpp
+++ /dev/null
@@ -1,91 +0,0 @@
-#include <arken/image.h>
-
-namespace arken {
-
-Image::Image(int width, int height, string color)
-{
-  m_width  = width;
-  m_height = height;
-
-  MagickWandGenesis();
-
-  /* Create a wand */
-  mw = NewMagickWand();
-  PixelWand *pmw = NewPixelWand();
-  PixelSetColor(pmw, color);
-  MagickNewImage (mw, (unsigned long) width, (unsigned long) height, pmw);
-}
-
-Image::Image(const Image &obj)
-{
-  m_width  = obj.m_width;
-  m_height = obj.m_height;
-  m_path   = obj.m_path;
-}
-
-Image::Image(const char * path)
-{
-  m_width  = -1;
-  m_height = -1;
-  m_path   = path;
-
-  MagickWandGenesis();
-
-  /* Create a wand */
-  mw = NewMagickWand();
-
-  /* Read the input image */
-  MagickReadImage(mw, m_path);
-}
-
-Image::~Image()
-{
-  /* Tidy up */
-  if(mw) mw = DestroyMagickWand(mw);
-
-  MagickWandTerminus();
-}
-
-void Image::resize(int width, int height)
-{
-  m_width  = width;
-  m_height = height;
-
-  MagickResizeImage(mw, (unsigned long) m_width, (unsigned long) m_height, BoxFilter, 1.0);
-}
-
-int Image::width()
-{
-  return (int) MagickGetImageWidth(mw);
-}
-
-int Image::height()
-{
-  return (int) MagickGetImageHeight(mw);
-}
-
-void Image::save(const char * path, int quality)
-{
-
-  if( quality > 0 ) {
-    MagickSetImageCompressionQuality(mw, quality);
-  }
-
-  /* write it */
-  MagickWriteImage(mw, path);
-}
-
-void Image::composite(Image * img)
-{
-  size_t x = ( this->width()  - img->width()  ) / 2;
-  size_t y = ( this->height() - img->height() ) / 2;
-  MagickCompositeImage(mw, img->mw, OverCompositeOp, x, y);
-}
-
-void Image::composite(Image * img, size_t x, size_t y)
-{
-  MagickCompositeImage(mw, img->mw, OverCompositeOp, x, y);
-}
-
-
-} // namespace arken
diff --git a/src/arken/image/image.cpp b/src/arken/image/image.cpp
new file mode 100644
index 0000000..8ed1010
--- /dev/null
+++ b/src/arken/image/image.cpp
@@ -0,0 +1,92 @@
+#include <arken/image.h>
+
+
+namespace arken {
+
+Image::Image(int width, int height, string color)
+{
+  m_width  = width;
+  m_height = height;
+
+  MagickWandGenesis();
+
+  /* Create a wand */
+  mw = NewMagickWand();
+  PixelWand *pmw = NewPixelWand();
+  PixelSetColor(pmw, color);
+  MagickNewImage (mw, (unsigned long) width, (unsigned long) height, pmw);
+}
+
+Image::Image(const Image &obj)
+{
+  m_width  = obj.m_width;
+  m_height = obj.m_height;
+  m_path   = obj.m_path;
+}
+
+Image::Image(const char * path)
+{
+  m_width  = -1;
+  m_height = -1;
+  m_path   = path;
+
+  MagickWandGenesis();
+
+  /* Create a wand */
+  mw = NewMagickWand();
+
+  /* Read the input image */
+  MagickReadImage(mw, m_path);
+}
+
+Image::~Image()
+{
+  /* Tidy up */
+  if(mw) mw = DestroyMagickWand(mw);
+
+  MagickWandTerminus();
+}
+
+void Image::resize(int width, int height)
+{
+  m_width  = width;
+  m_height = height;
+
+  MagickResizeImage(mw, (unsigned long) m_width, (unsigned long) m_height, BoxFilter, 1.0);
+}
+
+int Image::width()
+{
+  return (int) MagickGetImageWidth(mw);
+}
+
+int Image::height()
+{
+  return (int) MagickGetImageHeight(mw);
+}
+
+void Image::save(const char * path, int quality)
+{
+
+  if( quality > 0 ) {
+    MagickSetImageCompressionQuality(mw, quality);
+  }
+
+  /* write it */
+  MagickWriteImage(mw, path);
+}
+
+void Image::composite(Image * img)
+{
+  size_t x = ( this->width()  - img->width()  ) / 2;
+  size_t y = ( this->height() - img->height() ) / 2;
+  MagickCompositeImage(mw, img->mw, OverCompositeOp, x, y);
+}
+
+void Image::composite(Image * img, size_t x, size_t y)
+{
+  MagickCompositeImage(mw, img->mw, OverCompositeOp, x, y);
+}
+
+
+} // namespace arken
diff --git a/src/bindings/arken/CMakeLists.txt b/src/bindings/arken/CMakeLists.txt
index 2da74a1..24e71df 100644
--- a/src/bindings/arken/CMakeLists.txt
+++ b/src/bindings/arken/CMakeLists.txt
@@ -17,7 +17,9 @@ add_subdirectory(cache)
 add_subdirectory(chrono)
 add_subdirectory(compress)
 add_subdirectory(digest)
+if(ARKEN_IMAGE)
 add_subdirectory(image)
+endif()
 add_subdirectory(log)
 add_subdirectory(mvm)
 add_subdirectory(net)
